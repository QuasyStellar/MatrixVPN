from aiogram import types
from aiogram.types import FSInputFile
from loader import dp, bot
from utils.db_utils import get_user_by_id
from utils.messages_manage import non_authorized

# –ü–æ–¥–ø–∏—Å—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –≤—ã–±–æ—Ä–æ–º
caption = "‚ìò <b>–í—ã–±–µ—Ä–∏—Ç–µ VPN –ø—Ä–æ—Ç–æ–∫–æ–ª:</b>"


@dp.callback_query(lambda call: call.data in ("choose_proto_az", "choose_proto_gb"))
async def show_protos_menu(
    call: types.CallbackQuery = None, user_id: int = None, proto: str = None
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ VPN."""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user_by_id(call.from_user.id if user_id is None else user_id)
    proto = call.data[-2:] if user_id is None else proto
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø
    if user and user[2] == "accepted":
        inline_keyboard = [
            [
                types.InlineKeyboardButton(
                    text="üõ°Ô∏è OpenVPN",
                    callback_data=f"{proto}_openvpn",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ö° WireGuard",
                    callback_data=f"{proto}_wireguard",
                ),
                types.InlineKeyboardButton(
                    text="üïµÔ∏è AmneziaWG",
                    callback_data=f"{proto}_amneziawg",
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üîç –û VPN –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö",
                    callback_data=f"{proto}_about",
                )
            ],
        ]
        if (proto) == "az":
            inline_keyboard.append(
                [
                    types.InlineKeyboardButton(
                        text="üö® –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
                        web_app=types.WebAppInfo(
                            url="https://teletype.in/@esc_matrix/antizapret_warning"
                        ),
                    )
                ]
            )
        inline_keyboard.append(
            [
                types.InlineKeyboardButton(
                    text="üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                    callback_data=f"{proto}_faq",
                )
            ]
        )
        inline_keyboard.append(
            [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="vpn_variants")]
        )

        # –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ VPN
        markup = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

        if user_id is None:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ä–∞–∑–º–µ—Ç–∫–æ–π
            await call.message.edit_media(
                media=types.InputMediaPhoto(
                    media=FSInputFile("assets/vpn_protos.png"),
                    caption=caption,
                    parse_mode="HTML",
                ),
                reply_markup=markup,
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ user_id –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            await bot.send_photo(
                chat_id=user_id,
                photo=FSInputFile("assets/vpn_protos.png"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=markup,
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        await non_authorized(call.from_user.id, call.message.message_id)
