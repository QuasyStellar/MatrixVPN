import aiosqlite
from datetime import datetime
import pytz
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.filters.command import Command
import logging
from loader import bot, dp
from config import ADMIN_ID, DATABASE_PATH
from utils.db_utils import (
    grant_access_and_create_config,
    update_request_status,
    execute_command,
    delete_user,
    add_user,
    get_users_list,
)
from handlers.start_handler import start_handler
from utils.messages_manage import broadcast_message
from utils.Forms import Form


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±–µ–∫–æ–≤
@dp.message(Command("admin"))
async def admin_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    if message.from_user.id == ADMIN_ID:
        buttons = [
            types.InlineKeyboardButton(
                text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data="check_requests"
            ),
            types.InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user"
            ),
            types.InlineKeyboardButton(
                text="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="broadcast"
            ),
            types.InlineKeyboardButton(
                text="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="get_users"
            ),
            types.InlineKeyboardButton(
                text="–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="renew"
            ),
        ]
        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[buttons[i : i + 2] for i in range(0, len(buttons), 2)]
        )
        await bot.send_message(
            message.from_user.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup,
        )


@dp.callback_query(lambda call: call.data == "request_access")
async def request_access_callback(call: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = call.from_user.id
    username = call.from_user.username

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    state_data = await state.get_data()
    previous_bot_message_id = state_data.get("previous_bot_message")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if previous_bot_message_id:
        try:
            await bot.delete_message(user_id, previous_bot_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await bot.delete_message(user_id, call.message.message_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user(user_id, username)

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_access:{user_id}:{username}"
                ),
                types.InlineKeyboardButton(
                    text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny_access:{user_id}:{username}"
                ),
            ]
        ]
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –¥–æ—Å—Ç—É–ø–∞
    await bot.send_message(
        ADMIN_ID,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VPN.\nID: {user_id}",
        reply_markup=admin_markup,
    )

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ VPN" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    more = types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ VPN", callback_data="more")
    user_markup = types.InlineKeyboardMarkup(inline_keyboard=[[more]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–ø—Ä–æ—Å–∞
    await bot.send_animation(
        chat_id=user_id,
        animation=FSInputFile("assets/enter.gif"),
        caption="–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üì®\n\n –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=user_markup,
    )


@dp.callback_query(lambda call: call.data == "check_requests")
async def check_requests_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    if call.from_user.id == ADMIN_ID:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            async with db.execute(
                "SELECT * FROM users WHERE status = 'pending'"
            ) as cursor:
                requests = await cursor.fetchall()
        if requests:
            for req in requests:
                markup = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="–ü—Ä–∏–Ω—è—Ç—å",
                                callback_data=f"approve_access:{req[0]}:{req[1]}",
                            ),
                            types.InlineKeyboardButton(
                                text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                callback_data=f"deny_access:{req[0]}:{req[1]}",
                            ),
                        ]
                    ]
                )
                await bot.send_message(
                    ADMIN_ID, f"–ó–∞–ø—Ä–æ—Å –æ—Ç @{req[1]} (ID: {req[0]})", reply_markup=markup
                )
        else:
            await bot.send_message(ADMIN_ID, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")


@dp.callback_query(lambda call: call.data.startswith("approve_access:"))
async def approve_access_callback(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."""
    if call.from_user.id == ADMIN_ID:
        user_message_id = call.message.message_id
        user_id = int(call.data.split(":")[1])
        username = call.data.split(":")[2]

        await bot.delete_message(call.from_user.id, user_message_id)
        await state.update_data(user_id=user_id, username=username)
        await bot.send_message(
            ADMIN_ID, f"–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –¥–ª—è @{username}? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        await state.set_state(Form.waiting_for_n_days)


@dp.message(Form.waiting_for_n_days)
async def process_n_days(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞."""
    if message.from_user.id == ADMIN_ID:
        try:
            days = int(message.text.strip())
            if 0 < days < 3000:
                data = await state.get_data()
                user_id = data["user_id"]
                username = data["username"]
                await grant_access_and_create_config(user_id, days)
                await update_request_status(user_id, "accepted")

                await bot.send_animation(
                    chat_id=user_id,
                    animation=FSInputFile("assets/accepted.gif"),
                    caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <i>—Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä üëÅÔ∏è</i>\n\n‚ìò <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ MatrixVPN –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω!</b>",
                    parse_mode="HTML",
                )
                await start_handler(user_id=user_id)
                await bot.send_message(
                    ADMIN_ID,
                    f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {user_id}) –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω.",
                )
            else:
                await bot.send_message(
                    ADMIN_ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
                )
        except ValueError:
            await bot.send_message(ADMIN_ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        finally:
            await state.clear()


@dp.callback_query(lambda call: call.data.startswith("deny_access:"))
async def deny_access_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."""
    if call.from_user.id == ADMIN_ID:
        user_message_id = call.message.message_id
        await bot.delete_message(call.from_user.id, user_message_id)
        user_id, username = map(int, call.data.split(":")[1:3])
        await update_request_status(user_id, "denied")
        button = types.InlineKeyboardButton(
            text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å–Ω–æ–≤–∞",
            callback_data=f"request_access:{user_id}:{username}",
        )
        markup = types.InlineKeyboardMarkup(inline_keyboard=[[button]])
        await bot.send_message(
            user_id,
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ MatrixVPN –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å–Ω–æ–≤–∞.",
            reply_markup=markup,
        )
        await bot.send_message(
            ADMIN_ID, f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω."
        )


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
def get_day_word(days: int) -> str:
    if 10 <= days % 100 <= 20:
        return "–¥–Ω–µ–π"
    elif days % 10 == 1:
        return "–¥–µ–Ω—å"
    elif 2 <= days % 10 <= 4:
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"


@dp.callback_query(lambda call: call.data == "renew")
async def renew_configs_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
    if call.from_user.id == ADMIN_ID:
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with aiosqlite.connect(DATABASE_PATH) as db:
                async with db.execute(
                    "SELECT id, username, access_end_date FROM users WHERE status = 'accepted'"
                ) as cursor:
                    users_data = await cursor.fetchall()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user in users_data:
                user_id, username, access_end_date = user
                try:
                    access_end_date = datetime.fromisoformat(
                        access_end_date
                    ).astimezone(pytz.UTC)
                    remaining_time = access_end_date - datetime.now(pytz.UTC)
                    days = int(remaining_time.days + 1)

                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –¥–Ω—è
                    day_word = get_day_word(days)

                    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                    delete_command = f"/root/delete-client.sh ov n{user_id} && /root/delete-client.sh wg n{user_id}"
                    add_command = f"/root/add-client.sh ov n{user_id} {days} && /root/add-client.sh wg n{user_id} {days}"

                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
                    await execute_command(delete_command, user_id, "—É–¥–∞–ª–µ–Ω–∏—è")
                    await execute_command(add_command, user_id, "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è", days)
                    markup = types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="main_menu"
                                )
                            ],
                        ]
                    )

                    await bot.send_photo(
                        chat_id=user_id,
                        photo=FSInputFile("assets/warning.png"),
                        caption=f"üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–∏–∑–æ—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!</b>\n\n"
                        "<b>–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                        f"–î–æ—Å—Ç—É–ø –∫ <b>MatrixVPN</b> –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ <b>{days} {day_word}</b>.\n\n"
                        "<b>‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.</b>",
                        parse_mode="HTML",
                        reply_markup=markup,
                    )

                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
                    )
                    await bot.send_message(
                        ADMIN_ID,
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {e}",
                    )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await bot.send_message(
                ADMIN_ID,
                "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n\n"
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
            )

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}"
            )
            await bot.send_message(
                ADMIN_ID,
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}",
            )


@dp.callback_query(lambda call: call.data == "delete_user")
async def delete_user_callback(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if call.from_user.id == ADMIN_ID:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state(Form.waiting_for_user_id)
    await call.answer()


@dp.message(Form.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.from_user.id == ADMIN_ID:
        user_id = message.text.strip()
        if user_id.isdigit():
            await delete_user(user_id)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await state.clear()


@dp.callback_query(lambda call: call.data == "broadcast")
async def broadcast_callback(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if call.from_user.id == ADMIN_ID:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(Form.waiting_for_broadcast_message)


@dp.message(Form.waiting_for_broadcast_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if message.from_user.id == ADMIN_ID:
        text = message.text.strip()
        await broadcast_message(text)
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        await state.clear()


@dp.callback_query(lambda call: call.data == "get_users")
async def get_users_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if call.from_user.id == ADMIN_ID:
        file_path = await get_users_list()
        if file_path:
            await bot.send_document(ADMIN_ID, FSInputFile("users_list.txt"))
        else:
            await bot.send_message(
                ADMIN_ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
