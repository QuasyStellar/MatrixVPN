import re
import aiosqlite
from aiogram import types
from aiogram.fsm.context import FSMContext
from config import ADMIN_ID, DATABASE_PATH
from loader import bot, dp
from utils.Forms import Form
from aiogram.types import FSInputFile
from utils.db_utils import get_user_by_id
from utils.messages_manage import non_authorized
import logging

logger = logging.getLogger(__name__)


@dp.callback_query(lambda call: call.data == "settings")
async def settings_menu(
    call: types.CallbackQuery = None, user_id: int = None, state: FSMContext = None
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ VPN."""
    await state.clear()
    user = await get_user_by_id(call.from_user.id if user_id is None else user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user and user[2] == "accepted":
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤ –≤ –ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç",
                        callback_data="add_site",
                    )
                ],
                [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")],
            ]
        )
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        caption = "‚ìò <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é</b>:"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ user_id
        if user_id is None:
            await call.message.edit_media(
                media=types.InputMediaPhoto(
                    media=FSInputFile("assets/settings.png"),
                    caption=caption,
                    parse_mode="HTML",
                ),
                reply_markup=markup,
            )
        else:
            await bot.send_photo(
                chat_id=user_id,
                photo=FSInputFile("assets/settings.png"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=markup,
            )
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        await non_authorized(call.from_user.id, call.message.message_id)


@dp.callback_query(lambda call: call.data == "add_site")
async def ask_for_site_names_callback(call: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å–∞–π—Ç–∞/—Å–∞–π—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–≥–æ
    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")],
        ]
    )

    await call.message.edit_media(
        media=types.InputMediaPhoto(
            media=FSInputFile("assets/settings.png"),
            caption=(
                "‚ìò <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç/—Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ <b>–ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç</b>.\n\n"
                "<b>–ö–∞–∂–¥—ã–π —Å–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.</b>\n\n"
                "<b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:</b> <code>&lt;example&gt;.&lt;com&gt;</code>\n\n"
                "‚ö†Ô∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            ),
            parse_mode="HTML",
        ),
        reply_markup=markup,
    )
    await state.update_data(bot_message_id=call.message.message_id)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–∞–π—Ç–æ–≤
    await state.set_state(Form.waiting_for_site_names)


@dp.message(Form.waiting_for_site_names)
async def handle_site_names(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∞–π—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É."""
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    data = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot_message_id = data.get("bot_message_id")

    # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
    sites = message.text.strip()
    site_list = [site.strip() for site in sites.splitlines() if site.strip()]
    site_pattern = re.compile(r"^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç—ã
    formatted_sites = [site for site in site_list if site_pattern.match(site)]
    invalid_sites = [site for site in site_list if not site_pattern.match(site)]

    if invalid_sites:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∞–π—Ç—ã, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")],
            ]
        )
        await bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            caption=(
                "‚ìò <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç/—Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ <b>–ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç MatrixVPN</b>.\n\n"
                "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è:</b>\n"
                + "\n".join([f"<code>{site}</code>" for site in invalid_sites])
                + "\n\n–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n<code>&lt;example&gt;.&lt;com&gt;</code>."
            ),
            parse_mode="HTML",
            reply_markup=markup,
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(formatted_sites=formatted_sites)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –î–∞",
                    callback_data="confirm",
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="settings",
                ),
            ],
        ]
    )
    await bot.edit_message_caption(
        chat_id=message.chat.id,
        message_id=bot_message_id,
        caption=(
            "<b>‚ìò –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            + "\n".join([f"<b>{site}</b>" for site in formatted_sites])
        ),
        parse_mode="HTML",
        reply_markup=markup,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query(lambda call: call.data == "confirm")
async def confirm_action_callback(call: types.CallbackQuery, state: FSMContext):
    action = call.data
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
    formatted_sites = data.get("formatted_sites", [])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
    admin_message = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤ –≤ VPN:\n\n" + "\n".join(
        formatted_sites
    )
    admin_message += (
        f"\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {call.from_user.id} (@{call.from_user.username})"
    )
    await bot.send_message(ADMIN_ID, admin_message)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")],
        ]
    )

    await bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=bot_message_id,
        caption=(
            "üì® <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>\n\n"
            "<b>–°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            + "\n".join([f"<b>{site}</b>" for site in formatted_sites])
        ),
        parse_mode="HTML",
        reply_markup=markup,
    )
    await state.clear()



