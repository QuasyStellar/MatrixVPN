from aiogram import types
from aiogram.types import FSInputFile
from utils.db_utils import get_user_by_id
from utils.messages_manage import non_authorized
from loader import dp, bot


async def send_protocol_message(
    call: types.CallbackQuery, protocol_type: str, thr: bool = None
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ VPN."""
    user = await get_user_by_id(call.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø
    if user and user[2] == "accepted":
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        ut = types.InlineKeyboardButton(
            text="‚öñÔ∏è AUTO", callback_data=f"{protocol_type}_ut_ovpn"
        )
        t = types.InlineKeyboardButton(
            text="üè† TCP", callback_data=f"{protocol_type}_t_ovpn"
        )
        u = types.InlineKeyboardButton(
            text="üöÄ UDP", callback_data=f"{protocol_type}_u_ovpn"
        )
        more = types.InlineKeyboardButton(
            text="üìú –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö",
            callback_data=f"more_proto_{protocol_type}",
        )
        ret = types.InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"choose_proto_{protocol_type}"
        )
        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[[ut], [u, t], [more], [ret]]
        )
        caption = "‚ìò <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:</b>"
        if thr is None:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π –º–µ–¥–∏–∞–≥—Ä–∞—Ñ–∏–∫–æ–π
            await call.message.edit_media(
                media=types.InputMediaPhoto(
                    media=FSInputFile("assets/ovpn_protos.png"),
                    caption=caption,
                    parse_mode="HTML",
                ),
                reply_markup=markup,
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
            await bot.delete_message(call.from_user.id, call.message.message_id)
            await bot.send_photo(
                chat_id=call.from_user.id,
                photo=FSInputFile("assets/ovpn_protos.png"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=markup,
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await non_authorized(call.from_user.id, call.message.message_id)


@dp.callback_query(lambda call: call.data == "az_openvpn")
async def ovpn_menu_az(call: types.CallbackQuery, thr: bool = None) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ OpenVPN –¥–ª—è AZ."""
    await send_protocol_message(call, "az", thr)


@dp.callback_query(lambda call: call.data == "gb_openvpn")
async def ovpn_menu_gb(call: types.CallbackQuery, thr: bool = None) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ OpenVPN –¥–ª—è GB."""
    await send_protocol_message(call, "gb", thr)
