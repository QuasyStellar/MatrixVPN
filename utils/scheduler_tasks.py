import asyncio
import aiosqlite
from pytils import numeral
from aiogram import Bot, types
from aiogram.types import FSInputFile
from datetime import datetime, timezone
from babel.dates import format_datetime
import pytz

from config import ADMIN_ID, DATABASE_PATH


async def notify_pay_days(bot: Bot) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ MatrixVPN –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            current_date = datetime.now(timezone.utc)
            # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–Ω—è—Ö
            days_threshold = [7, 3, 1]

            async with db.execute(
                """
                SELECT id, username, access_end_date FROM users
                WHERE access_end_date IS NOT NULL AND status = "accepted"
            """
            ) as cursor:
                users = await cursor.fetchall()

            for user in users:
                user_id, username, access_end_date = user
                access_end_date = datetime.fromisoformat(access_end_date)
                remaining_time = access_end_date - current_date
                remaining_days = remaining_time.days

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
                end_date_formatted = format_datetime(
                    access_end_date.replace(tzinfo=pytz.utc).astimezone(
                        pytz.timezone("Europe/Moscow")
                    ),
                    "d MMMM yyyy '–≤' HH:mm",
                    locale="ru",
                )

                if remaining_days in days_threshold:
                    message = (
                        f"<b>‚è∞ –í—Ä–µ–º—è –∏–¥–µ—Ç, @{username}!</b>\n\n"
                        f"–í–∞—à –¥–æ—Å—Ç—É–ø –∫ <b>MatrixVPN</b> –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ <b>{numeral.get_plural(remaining_days, '–¥–µ–Ω—å, –¥–Ω—è, –¥–Ω–µ–π')}</b>.\n\n"
                        f"–¢–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: <b>{end_date_formatted}</b>\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É</b>, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ <b>¬´–º–∞—Ç—Ä–∏—Ü—É¬ª</b>.\n\n"
                    )
                    await bot.send_message(user_id, message, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –¥–Ω—è—Ö: {e}")


async def notify_pay_hour(bot: Bot) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ MatrixVPN –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            current_date = datetime.now(timezone.utc)
            # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —á–∞—Å–∞—Ö
            hours_threshold = [12, 6, 1]

            async with db.execute(
                """
                SELECT id, username, access_end_date FROM users
                WHERE access_end_date IS NOT NULL AND status = "accepted"
            """
            ) as cursor:
                users = await cursor.fetchall()

            for user in users:
                user_id, username, access_end_date = user
                access_end_date = datetime.fromisoformat(access_end_date)

                remaining_time = access_end_date - current_date
                remaining_hours = remaining_time.seconds // 3600

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
                end_date_formatted = format_datetime(
                    access_end_date.replace(tzinfo=pytz.utc).astimezone(
                        pytz.timezone("Europe/Moscow")
                    ),
                    "d MMMM yyyy '–≤' HH:mm",
                    locale="ru",
                )

                if remaining_time.days < 1 and remaining_hours in hours_threshold:
                    message = (
                        f"<b>üì¢ –í–Ω–∏–º–∞–Ω–∏–µ, @{username}!</b>\n\n"
                        f"–í–∞—à –¥–æ—Å—Ç—É–ø –∫ <b>MatrixVPN</b> –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ <b>{numeral.get_plural(remaining_hours, '—á–∞—Å, —á–∞—Å–∞, —á–∞—Å–æ–≤')}</b> ‚è≥.\n\n"
                        f"–¢–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: <b>{end_date_formatted}</b>\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É</b>, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ <b>¬´–º–∞—Ç—Ä–∏—Ü—É¬ª</b>.\n\n"
                    )
                    await bot.send_message(user_id, message, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —á–∞—Å–∞—Ö: {e}")


async def make_daily_backup(bot: Bot) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    try:
        await bot.send_document(
            ADMIN_ID,
            FSInputFile(DATABASE_PATH),
            caption=datetime.now(timezone.utc).isoformat(),
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")


async def check_users_if_expired(bot: Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –¥–æ—Å—Ç—É–ø–æ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏—Ö –æ–± —ç—Ç–æ–º."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            current_date = datetime.now(timezone.utc).isoformat()

            async with db.execute(
                """
                SELECT id, username FROM users
                WHERE access_end_date IS NOT NULL AND status = "accepted" AND access_end_date < ?
            """,
                (current_date,),
            ) as cursor:
                expired_users = await cursor.fetchall()

            for user in expired_users:
                user_id, username = user

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 'expired'
                await db.execute(
                    """
                    UPDATE users SET status = 'expired', access_granted_date = NULL, access_duration = NULL
                    WHERE id = ?
                """,
                    (user_id,),
                )

                # –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
                command = f"/root/delete-client.sh ov {user_id} && /root/delete-client.sh wg {user_id}"
                process = await asyncio.create_subprocess_shell(command, shell=True)
                await process.communicate()

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –¥–æ—Å—Ç—É–ø–∞
                message = (
                    f"<b>üö´ –í–Ω–∏–º–∞–Ω–∏–µ, @{username}!</b>\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ <b>MatrixVPN</b> –∏—Å—Ç–µ–∫–ª–∞ ‚è≥.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É</b>, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ <b>¬´–º–∞—Ç—Ä–∏—Ü—É¬ª</b>."
                )
                await bot.send_animation(
                    user_id,
                    FSInputFile("assets/expired.gif"),
                    caption=message,
                    parse_mode="HTML",
                )

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –¥–æ—Å—Ç—É–ø–∞
                markup = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø",
                                callback_data=f"approve_access:{user_id}:{username}",
                            )
                        ]
                    ]
                )
                await bot.send_message(
                    ADMIN_ID,
                    f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {user_id}) –∏—Å—Ç–µ–∫.",
                    reply_markup=markup,
                )

            await db.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
