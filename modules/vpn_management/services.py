import os
from aiogram import types
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramAPIError
import asyncio # Import asyncio for to_thread
import logging # Ensure logging is imported

from core.bot import bot
from config.settings import VPN_CONFIG_PATH
from services.db_operations import get_user_by_id
from services.messages_manage import non_authorized

logger = logging.getLogger(__name__)

# –¢–µ–∫—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π VPN —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
config_texts = {
    "az_openvpn": {
        "prefix": "AZ-U+T",
        "text": "üåç –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–µ—Ç–µ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–∏–±–∫–æ—Å—Ç–∏ ‚ú®\n\n<b>FAQ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤:</b>\n\n <code>&lt;–≤–∞—Ä–∏–∞–Ω—Ç_–≤–ø–Ω&gt;-&lt;–ø—Ä–æ—Ç–æ–∫–æ–ª&gt;-&lt;–¥–∞—Ç–∞_–∞–∫—Ç–∏–≤–∞—Ü–∏–∏&gt;.*</code>",
    },
    "gb_openvpn": {
        "prefix": "GL-U+T",
        "text": "üåç –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–µ—Ç–µ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–∏–±–∫–æ—Å—Ç–∏ ‚ú®\n\n<b>FAQ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤:</b>\n\n <code>&lt;–≤–∞—Ä–∏–∞–Ω—Ç_–≤–ø–Ω&gt;-&lt;–ø—Ä–æ—Ç–æ–∫–æ–ª&gt;-&lt;–¥–∞—Ç–∞_–∞–∫—Ç–∏–≤–∞—Ü–∏–∏&gt;.*</code>",
    },
    "az_amneziawg": {
        "prefix": "AZ-AM",
        "text": "üïä –û—â—É—Ç–∏—Ç–µ —Å–≤–æ–±–æ–¥—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ c <b>—É–ª—É—á—à–µ–Ω–Ω—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN</b> ü•∑\n\n<b>FAQ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤:</b>\n\n <code>&lt;–≤–∞—Ä–∏–∞–Ω—Ç_–≤–ø–Ω&gt;-&lt;–ø—Ä–æ—Ç–æ–∫–æ–ª&gt;-&lt;–¥–∞—Ç–∞_–∞–∫—Ç–∏–≤–∞—Ü–∏–∏&gt;.*</code>",
    },
    "gb_amneziawg": {
        "prefix": "GL-AM",
        "text": "üôà –í–∞—à–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É <b>–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫</b> –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å! <b>–ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</b> –∏ <b>–æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º!</b> üïµÔ∏è‚Äç‚ôÇÔ∏è\n\n<b>FAQ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤:</b>\n\n <code>&lt;–≤–∞—Ä–∏–∞–Ω—Ç_–≤–ø–Ω&gt;-&lt;–ø—Ä–æ—Ç–æ–∫–æ–ª&gt;-&lt;–¥–∞—Ç–∞_–∞–∫—Ç–∏–≤–∞—Ü–∏–∏&gt;.*</code>",
    },
    "az_wireguard": {
        "prefix": "AZ-WG",
        "text": "‚ö° –û–±—Ö–æ–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º—ã–º —Å–∞–π—Ç–∞–º —Å <b>–≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é</b>! üåä\n\n<b>FAQ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤:</b>\n\n <code>&lt;–≤–∞—Ä–∏–∞–Ω—Ç_–≤–ø–Ω&gt;-&lt;–ø—Ä–æ—Ç–æ–∫–æ–ª&gt;-&lt;–¥–∞—Ç–∞_–∞–∫—Ç–∏–≤–∞—Ü–∏–∏&gt;.*</code>",
    },
    "gb_wireguard": {
        "prefix": "GL-WG",
        "text": "üîí –ü–æ–ª—É—á–∏—Ç–µ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å</b> –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞—â–∏—Ç–æ–π! üîê\n\n<b>FAQ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤:</b>\n\n <code>&lt;–≤–∞—Ä–∏–∞–Ω—Ç_–≤–ø–Ω&gt;-&lt;–ø—Ä–æ—Ç–æ–∫–æ–ª&gt;-&lt;–¥–∞—Ç–∞_–∞–∫—Ç–∏–≤–∞—Ü–∏–∏&gt;.*</code>",
    },
}

async def send_vpn_config(call: types.CallbackQuery) -> bool:
    user_id = call.from_user.id
    user = await get_user_by_id(user_id)

    if user and user[2] == "accepted":
        config = config_texts[call.data]
        file_type = (
            "conf" if "WG" in config["prefix"] or "AM" in config["prefix"] else "ovpn"
        )
        file_prefix = config["prefix"]
        
        try:
            # Use asyncio.to_thread for blocking os.listdir
            config_dir_path = f"{VPN_CONFIG_PATH}/n{user_id}"
            files_in_dir = await asyncio.to_thread(os.listdir, config_dir_path)

            for file_name in files_in_dir:
                if file_name.startswith(file_prefix) and file_name.endswith(f".{file_type}"):
                    full_file_path = os.path.join(config_dir_path, file_name)
                    
                    # Check if file exists before attempting to send
                    if not await asyncio.to_thread(os.path.exists, full_file_path):
                        logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_file_path} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        continue # Try next file or exit if no other files expected

                    caption = config["text"]
                    if file_type == "ovpn":
                        app_url = "https://openvpn.net/client/"
                    elif "WG" in config["prefix"]:
                        app_url = "https://www.wireguard.com/install/"
                    elif "AM" in config["prefix"]:
                        app_url = "https://docs.amnezia.org/ru/documentation/amnezia-wg/"
                    else:
                        app_url = None

                    markup = (
                        types.InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    types.InlineKeyboardButton(
                                        text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                                        web_app=types.WebAppInfo(url=app_url),
                                    )
                                ]
                            ]
                        )
                        if app_url
                        else None
                    )

                    try:
                        await bot.send_document(
                            user_id,
                            FSInputFile(full_file_path),
                            caption=caption,
                            parse_mode="HTML",
                            reply_markup=markup,
                        )
                        return True # Config sent successfully
                    except TelegramAPIError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {full_file_path} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
                        return False # Indicate failure to send config
        except FileNotFoundError:
            logger.warning(f"–ö–∞—Ç–∞–ª–æ–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {config_dir_path}")
            await bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return False
    return False # User not accepted or config not sent

async def get_protos_menu_markup(user_id: int, proto: str) -> types.InlineKeyboardMarkup:
    # This function will generate the markup for protos_menu
    # It will be called from handlers and potentially other services
    user = await get_user_by_id(user_id)
    if not (user and user[2] == "accepted"):
        return None

    inline_keyboard = [
        [
            types.InlineKeyboardButton(
                text="üõ°Ô∏è OpenVPN",
                callback_data=f"{proto}_openvpn",
            )
        ],
        [
            types.InlineKeyboardButton(
                text="‚ö° WireGuard",
                callback_data=f"{proto}_wireguard",
            ),
            types.InlineKeyboardButton(
                text="üïµÔ∏è AmneziaWG",
                callback_data=f"{proto}_amneziawg",
            ),
        ],
        [
            types.InlineKeyboardButton(
                text="üîç –û VPN –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö",
                callback_data=f"{proto}_about",
            )
        ],
    ]
    if (proto) == "az":
        inline_keyboard.insert(
            0,
            [
                types.InlineKeyboardButton(
                    text="üö® –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
                    web_app=types.WebAppInfo(
                        url="https://teletype.in/@esc_matrix/antizapret_warning"
                    ),
                )
            ],
        )
    inline_keyboard.append(
        [
            types.InlineKeyboardButton(
                text="üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                callback_data=f"{proto}_faq",
            )
        ]
    )
    inline_keyboard.append(
        [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="vpn_variants")]
    )

    return types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

async def get_vpn_variants_menu_markup() -> types.InlineKeyboardMarkup:
    # This function will generate the markup for vpn_variants_menu
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üîí –ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç", callback_data="choose_proto_az"),
                types.InlineKeyboardButton(text="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π", callback_data="choose_proto_gb")
            ],
            [
                types.InlineKeyboardButton(
                    text="üìú –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö", callback_data="more_variants"
                )
            ],
            [
                types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")
            ],
        ]
    )

async def get_vpn_info_text() -> str:
    # This function will return the text for vpn_info_menu
    return (
        "‚ìò <b>MatrixVPN</b> üõ°Ô∏è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
        "<b>–ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç VPN üîí</b> ‚Äî —Ç—É–Ω–Ω–µ–ª–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã, "
        "–ø—Ä–æ–ø—É—Å–∫–∞—è –æ–±—ã—á–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –≤–Ω–µ VPN –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚ö°\n\n"
        "<b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π VPN üåç</b> ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, "
        "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∞–π—Ç–∞–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å üîí\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø—Ä–æ—Ç–æ–∫–æ–ª—ã <b>OpenVPN</b>, <b>WireGuard</b> –∏ <b>AmneziaWG</b>."
    )
