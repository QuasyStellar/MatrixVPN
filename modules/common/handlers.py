from aiogram import types, Router
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramAPIError

import re
import random
from datetime import datetime
from babel.dates import format_datetime
import pytz
from pytils import numeral

from core.bot import bot
from services.db_operations import get_user_by_id
from services.messages_manage import non_authorized, send_message_with_cleanup
from services.forms import Form
from modules.common.services import quotes, message_text_vpn_variants, message_text_protos_info
from config.settings import ADMIN_ID # Added import for ADMIN_ID

common_router = Router()

@common_router.callback_query(lambda call: call.data == "main_menu")
async def main_menu(call: types.CallbackQuery = None, user_id: int = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é VPN."""

    user_id = user_id or call.from_user.id

    user = await get_user_by_id(user_id)
    if not (user and user[2] == "accepted"):
        await non_authorized(user_id, call.message.message_id)
        return

    access_end_date = user[5]

    access_end_date = datetime.fromisoformat(access_end_date)
    current_date = datetime.now(pytz.utc)

    remaining_time = access_end_date - current_date
    remaining_days = remaining_time.days
    remaining_hours = remaining_time.total_seconds() // 3600

    end_date_formatted = format_datetime(
        access_end_date.replace(tzinfo=pytz.utc).astimezone(
            pytz.timezone("Europe/Moscow")
        ),
        "d MMMM yyyy '–≤' HH:mm",
        locale="ru",
    )

    if remaining_days < 3:
        time_text = f"{numeral.get_plural(int(remaining_hours), '—á–∞—Å, —á–∞—Å–∞, —á–∞—Å–æ–≤')}"
    else:
        time_text = f"{numeral.get_plural(remaining_days, '–¥–µ–Ω—å, –¥–Ω—è, –¥–Ω–µ–π')}"

    menu = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üí° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN", callback_data="vpn_variants"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="tg://user?id=6522480240"
                ),
            ],
        ]
    )

    caption_text = f"""
‚ìò <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

<blockquote><b>‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {time_text}
üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_formatted}</b></blockquote>

<blockquote><b>üí¨ ¬´{random.choice(quotes)}¬ª</b></blockquote>
"""

    if call:
        try:
            await call.message.edit_media(
                media=types.InputMediaPhoto(
                    media=types.FSInputFile("assets/matrix.png"),
                    caption=caption_text,
                    parse_mode="HTML",
                ),
                reply_markup=menu,
            )
        except TelegramAPIError:
            await bot.send_photo(
                chat_id=user_id,
                photo=types.FSInputFile("assets/matrix.png"),
                caption=caption_text,
                parse_mode="HTML",
                reply_markup=menu,
            )
    else:
        await bot.send_photo(
            chat_id=user_id,
            photo=types.FSInputFile("assets/matrix.png"),
            caption=caption_text,
            parse_mode="HTML",
            reply_markup=menu,
        )


@common_router.callback_query(lambda call: call.data == "settings")
async def settings_menu(
    call: types.CallbackQuery = None, user_id: int = None, state: FSMContext = None
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ VPN."""
    if state:
        await state.clear()
    user = await get_user_by_id(call.from_user.id if user_id is None else user_id)

    if user and user[2] == "accepted":
        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤ –≤ –ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç",
                        callback_data="add_site",
                    )
                ],
                [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")],
            ]
        )
        caption = "‚ìò <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é</b>:"

        if user_id is None:
            try:
                await call.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=types.FSInputFile("assets/settings.png"),
                        caption=caption,
                        parse_mode="HTML",
                    ),
                    reply_markup=markup,
                )
            except TelegramAPIError:
                await bot.send_photo(
                    chat_id=call.from_user.id,
                    photo=types.FSInputFile("assets/settings.png"),
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=markup,
                )
        else:
            await bot.send_photo(
                chat_id=user_id,
                photo=types.FSInputFile("assets/settings.png"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=markup,
            )
    else:
        await non_authorized(call.from_user.id, call.message.message_id)


@common_router.callback_query(lambda call: call.data == "add_site")
async def ask_for_site_names_callback(call: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å–∞–π—Ç–∞/—Å–∞–π—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç."""
    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")],
        ]
    )

    try:
        await call.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.FSInputFile("assets/settings.png"),
                caption=(
                    "‚ìò <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç/—Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ <b>–ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç</b>.\n\n"
                    "<b>–ö–∞–∂–¥—ã–π —Å–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.</b>\n\n"
                    "<b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:</b> <code>&lt;example&gt;.&lt;com&gt;</code>\n\n"
                    "‚ö†Ô∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
                ),
                parse_mode="HTML",
            ),
            reply_markup=markup,
        )
    except TelegramAPIError:
        await bot.send_photo(
            chat_id=call.from_user.id,
            photo=types.FSInputFile("assets/settings.png"),
            caption=(
                "‚ìò <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç/—Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ <b>–ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç</b>.\n\n"
                "<b>–ö–∞–∂–¥—ã–π —Å–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.</b>\n\n"
                "<b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:</b> <code>&lt;example&gt;.&lt;com&gt;</code>\n\n"
                "‚ö†Ô∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b> –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            ),
            parse_mode="HTML",
            reply_markup=markup,
        )
    await state.update_data(bot_message_id=call.message.message_id)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–∞–π—Ç–æ–≤
    await state.set_state(Form.waiting_for_site_names)

    await state.update_data(bot_message_id=call.message.message_id)
    await state.set_state(Form.waiting_for_site_names)


@common_router.message(Form.waiting_for_site_names)
async def handle_site_names(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∞–π—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É."""
    data = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot_message_id = data.get("bot_message_id")

    sites = message.text.strip()
    site_list = [site.strip() for site in sites.splitlines() if site.strip()]
    site_pattern = re.compile(r"^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$")

    formatted_sites = [site for site in site_list if site_pattern.match(site)]
    invalid_sites = [site for site in site_list if not site_pattern.match(site)]

    if invalid_sites:
        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")],
            ]
        )
        try:
            await bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                caption=(
                    "‚ìò <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç/—Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ <b>–ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç MatrixVPN</b>.\n\n"
                    "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è:</b>\n"
                    + "\n".join([f"<code>{site}</code>" for site in invalid_sites])
                    + "\n\n–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n<code>&lt;example&gt;.&lt;com&gt;</code>."
                ),
                parse_mode="HTML",
                reply_markup=markup,
            )
        except TelegramAPIError:
            await bot.send_message(
                chat_id=message.chat.id,
                text=(
                    "‚ìò <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞</b>, –≤–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç/—Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ <b>–ê–Ω—Ç–∏–ó–∞–ø—Ä–µ—Ç MatrixVPN</b>.\n\n"
                    "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è:</b>\n"
                    + "\n".join([f"<code>{site}</code>" for site in invalid_sites])
                    + "\n\n–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n<code>&lt;example&gt;.&lt;com&gt;</code>."
                ),
                parse_mode="HTML",
                reply_markup=markup,
            )
        return

    await state.update_data(formatted_sites=formatted_sites)

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –î–∞",
                    callback_data="confirm",
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="settings",
                ),
            ],
        ]
    )
    try:
        await bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            caption=(
                "<b>‚ìò –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
                + "\n".join([f"<b>{site}</b>" for site in formatted_sites])
            ),
            parse_mode="HTML",
            reply_markup=markup,
        )
    except TelegramAPIError:
        await bot.send_message(
            chat_id=message.chat.id,
            text=(
                "<b>‚ìò –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
                + "\n".join([f"<b>{site}</b>" for site in formatted_sites])
            ),
            parse_mode="HTML",
            reply_markup=markup,
        )


@common_router.callback_query(lambda call: call.data == "confirm")
async def confirm_action_callback(call: types.CallbackQuery, state: FSMContext):
    action = call.data
    data = await state.get_data()
    bot_message_id = data.get("bot_message_id")

    formatted_sites = data.get("formatted_sites", [])

    admin_message = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤ –≤ VPN:\n\n" + "\n".join(
        formatted_sites
    )
    admin_message += (
        f"\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {call.from_user.id} (@{call.from_user.username})"
    )
    await bot.send_message(ADMIN_ID, admin_message)

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")],
        ]
    )

    try:
        await bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=bot_message_id,
            caption=(
                "üì® <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>\n\n"
                "<b>–°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
                + "\n".join([f"<b>{site}</b>" for site in formatted_sites])
            ),
            parse_mode="HTML",
            reply_markup=markup,
        )
    except TelegramAPIError:
        await bot.send_message(
            chat_id=call.message.chat.id,
            text=(
                "üì® <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>\n\n"
                "<b>–°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
                + "\n".join([f"<b>{site}</b>" for site in formatted_sites])
            ),
            parse_mode="HTML",
            reply_markup=markup,
        )
    await state.clear()


@common_router.callback_query(lambda call: call.data in ("az_about", "gb_about"))
async def info_about_protos_callback(
    call: types.CallbackQuery, state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö VPN."""
    user = await get_user_by_id(call.from_user.id)

    if user and user[2] == "accepted":
        state_data = await state.get_data()
        previous_bot_message_id = state_data.get("previous_bot_message")

        try:
            try:
                await bot.delete_message(call.from_user.id, call.message.message_id)
            except TelegramAPIError:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ info_about_protos_callback:", exc_info=True)

            bot_message = await send_message_with_cleanup(
                call.from_user.id, message_text_protos_info, state
            )
            await state.update_data(previous_bot_message=bot_message.message_id)

            from modules.vpn_management.services import get_protos_menu_markup
            markup = await get_protos_menu_markup(call.from_user.id, call.data[:2])
            caption = "‚ìò –í—ã–±–µ—Ä–∏—Ç–µ VPN –ø—Ä–æ—Ç–æ–∫–æ–ª:"
            await bot.send_photo(
                chat_id=call.from_user.id,
                photo=types.FSInputFile("assets/vpn_protos.png"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=markup,
            )

        except TelegramAPIError:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö:", exc_info=True)

    else:
        await state.clear()
        await bot.delete_message(call.from_user.id, call.message.message_id)
        from modules.user_onboarding.handlers import start_handler
        await start_handler(user_id=call.from_user.id)


@common_router.callback_query(lambda call: call.data == "more")
async def info_about_vpn_callback(call: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN'."""
    try:
        try:
            await bot.delete_message(call.from_user.id, call.message.message_id)
        except TelegramAPIError:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ info_about_vpn_callback:", exc_info=True)

        await send_message_with_cleanup(call.from_user.id, message_text_vpn_variants, state)

        from modules.user_onboarding.handlers import start_handler
        await start_handler(user_id=call.from_user.id)

    except TelegramAPIError:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ VPN:", exc_info=True)


@common_router.message(Command("more"))
async def info_about_vpn_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '/more'."""
    user_id = message.from_user.id

    try:
        await bot.send_message(
            user_id,
            message_text_vpn_variants,
            parse_mode="HTML",
        )
    except TelegramAPIError:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã 'more':", exc_info=True)
