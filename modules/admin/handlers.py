from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramAPIError

from datetime import datetime, timedelta
import pytz
import logging

from core.bot import bot
from config.settings import ADMIN_ID
from services.db_operations import (
    delete_user,
    get_users_list,
    get_accepted_users,
    get_user_by_id,
    update_user_access,
    add_promo_code,
    delete_promo_code,
    get_all_promo_codes,
    grant_access_and_create_config,
    get_pending_requests,
)
from services.messages_manage import broadcast_message
from services.forms import Form
from modules.admin.services import get_day_word, update_user_configs
from modules.admin.filters import IsAdmin
from modules.common.services import main_menu
from modules.user_onboarding.services import enter_caption

logger = logging.getLogger(__name__)

admin_router = Router()


@admin_router.message(Command("admin"), IsAdmin())
async def admin_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    await admin_menu(message)


async def admin_menu(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data="check_requests"
        ),
        types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user"
        ),
        types.InlineKeyboardButton(
            text="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="broadcast"
        ),
        types.InlineKeyboardButton(
            text="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="get_users"
        ),
        types.InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo_codes"),
    ]
    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[buttons[i : i + 2] for i in range(0, len(buttons), 2)]
    )
    await bot.send_message(
        message.from_user.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
    )


@admin_router.callback_query(lambda call: call.data == "admin_menu", IsAdmin())
async def admin_menu_callback(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data="check_requests"
        ),
        types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user"
        ),
        types.InlineKeyboardButton(
            text="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="broadcast"
        ),
        types.InlineKeyboardButton(
            text="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="get_users"
        ),
        types.InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo_codes"),
    ]
    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[buttons[i : i + 2] for i in range(0, len(buttons), 2)]
    )
    await call.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
    )


@admin_router.callback_query(lambda call: call.data == "check_requests", IsAdmin())
async def check_requests_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
    pending_requests = await get_pending_requests()

    if pending_requests:
        response_text = "<b>–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>"

        for user in pending_requests:
            user_id, username, status, _, _, _, _, _ = user  # Unpack all fields
            response_text += f"ID: <code>{user_id}</code>\n"
            response_text += f"Username: @{username}\n"
            response_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"

            markup = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_request_{user_id}"
                        ),
                    ]
                ]
            )
            await call.message.answer(
                response_text, parse_mode="HTML", reply_markup=markup
            )
            response_text = ""  # Clear for next request

        # Add a back button to the last message or send a separate one
        back_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ]
        )
        await call.message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–≤–µ–¥–µ–Ω—ã", reply_markup=back_markup
        )  # Send a blank message with back button

    else:
        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ]
        )
        await call.message.edit_text(
            "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
            reply_markup=markup,
        )
    await call.answer()


@admin_router.callback_query(
    lambda call: call.data.startswith("accept_request_"), IsAdmin()
)
async def accept_request_callback(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[2])

    # Assuming a default trial period, or you can make it configurable
    trial_days = 30  # Example: 30 days access

    try:
        await grant_access_and_create_config(user_id, trial_days)

        await call.message.edit_text(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {trial_days} –¥–Ω–µ–π.",
            parse_mode="HTML",
        )
        await bot.send_animation(
            chat_id=user_id,
            animation=types.FSInputFile("assets/accepted.gif"),
            caption=(
                enter_caption + "\n\n" "üí≥ <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ MatrixVPN</b>\n"
            ),
            parse_mode="HTML",
        )
        await main_menu(user_id=user_id)  # Send main menu to the user
    except Exception as e:
        await call.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>: {e}",
            parse_mode="HTML",
        )
        logger.error(f"Error accepting request for user {user_id}: {e}", exc_info=True)
    await call.answer()


@admin_router.callback_query(lambda call: call.data == "promo_codes", IsAdmin())
async def promo_codes_menu(call: types.CallbackQuery):
    """Displays the promo code management menu."""
    buttons = [
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promo"),
        types.InlineKeyboardButton(
            text="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="list_promos_menu"
        ),
        types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="delete_promo"
        ),
        types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_menu"),
    ]
    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[buttons[i : i + 2] for i in range(0, len(buttons), 2)]
    )
    await call.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:",
        reply_markup=markup,
    )


@admin_router.callback_query(lambda call: call.data == "add_promo", IsAdmin())
async def add_promo_callback(call: types.CallbackQuery, state: FSMContext):
    """Handler for adding a new promo code."""
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>&lt;–∫–æ–¥&gt; &lt;–¥–Ω–∏&gt; &lt;–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è&gt;</code>",
        parse_mode="HTML",
    )
    await state.set_state(Form.waiting_for_promo_code_data)
    await call.answer()


@admin_router.message(Form.waiting_for_promo_code_data, IsAdmin())
async def process_promo_code_data(message: types.Message, state: FSMContext):
    """Handler for processing the new promo code data."""
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º."
        )
        return

    code, days_str, usage_count_str = parts
    try:
        days = int(days_str)
        usage_count = int(usage_count_str)
        if days <= 0 or usage_count <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏."
        )
        return

    if await add_promo_code(code, days, usage_count):
        await message.answer(
            f"–ü—Ä–æ–º–æ–∫–æ–¥ '{code}' –Ω–∞ {days} –¥–Ω–µ–π —Å {usage_count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."
        )
    else:
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ '{code}'. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
    await state.clear()


@admin_router.callback_query(lambda call: call.data == "list_promos_menu", IsAdmin())
async def list_promos_menu_callback(call: types.CallbackQuery):
    """Handler for listing all promo codes."""
    promo_codes = await get_all_promo_codes()
    if promo_codes:
        response = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n\n"
        for promo in promo_codes:
            response += f"–ö–æ–¥: `{promo[0]}`, –î–Ω–∏: {promo[1]}, –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if promo[2] == 1 else '–ù–µ—Ç'}, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {promo[3]}\n"
    else:
        response = "–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç."

    await call.message.answer(response, parse_mode="Markdown")
    await call.answer()


@admin_router.callback_query(lambda call: call.data == "delete_promo", IsAdmin())
async def delete_promo_callback(call: types.CallbackQuery, state: FSMContext):
    """Handler for deleting a promo code."""
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(Form.waiting_for_promo_code_to_delete)
    await call.answer()


@admin_router.message(Form.waiting_for_promo_code_to_delete, IsAdmin())
async def process_promo_code_to_delete(message: types.Message, state: FSMContext):
    """Handler for processing the promo code to delete."""
    promo_code = message.text.strip()
    if await delete_promo_code(promo_code):
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()

    await call.answer()


@admin_router.message(Command("renewall"), IsAdmin())
async def renew_configs_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
    users_data = await get_accepted_users()
    failed_users = []
    for user in users_data:
        user_id, username, access_end_date = user
        try:
            access_end_date = datetime.fromisoformat(access_end_date).astimezone(
                pytz.UTC
            )
            remaining_time = access_end_date - datetime.now(pytz.UTC)
            days = int(remaining_time.days)

            if await update_user_configs(user_id, days):
                day_word = get_day_word(days)
                markup = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="main_menu"
                            )
                        ],
                    ]
                )

                await bot.send_photo(
                    chat_id=user_id,
                    photo=types.FSInputFile("assets/warning.png"),
                    caption=f"üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–∏–∑–æ—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!</b>\n\n"
                    "<b>–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                    f"–î–æ—Å—Ç—É–ø –∫ <b>MatrixVPN</b> –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ <b>{days} {day_word}</b>.\n\n"
                    "<b>‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.</b>",
                    parse_mode="HTML",
                    reply_markup=markup,
                )
            else:
                failed_users.append(f"@{username} (ID: {user_id})")

        except TelegramAPIError as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {e}",
                exc_info=True,
            )
            failed_users.append(f"@{username} (ID: {user_id})")

    if failed_users:
        await bot.send_message(
            ADMIN_ID,
            "‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û—à–∏–±–∫–∏ –¥–ª—è:\n"
            + "\n".join(failed_users),
        )
    else:
        await bot.send_message(
            ADMIN_ID,
            "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
        )


@admin_router.callback_query(lambda call: call.data == "delete_user", IsAdmin())
async def delete_user_callback(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(Form.waiting_for_user_id)
    await call.answer()


@admin_router.message(Form.waiting_for_user_id, IsAdmin())
async def process_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.text.strip()
    if user_id.isdigit():
        if await delete_user(int(user_id)):
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await state.clear()


@admin_router.callback_query(lambda call: call.data == "broadcast", IsAdmin())
async def broadcast_callback(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Form.waiting_for_broadcast_message)


@admin_router.message(Form.waiting_for_broadcast_message, IsAdmin())
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = message.text.strip()
    await broadcast_message(text)
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()


@admin_router.callback_query(lambda call: call.data == "get_users", IsAdmin())
async def get_users_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    file_path = await get_users_list()
    if file_path:
        await bot.send_document(ADMIN_ID, types.FSInputFile("users_list.csv"))
    else:
        await bot.send_message(ADMIN_ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@admin_router.message(Command("renew"), IsAdmin())
async def renew_access(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã renew."""
    command_parts = message.text.split()
    if len(command_parts) != 3:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /renew <user_id> <+days>")
        return

    try:
        user_id = int(command_parts[1])
        days_str = command_parts[2]
        days_to_add = int(days_str.lstrip("+"))
    except (ValueError, IndexError):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /renew <user_id> <+days>")
        return

    try:
        user = await get_user_by_id(user_id)

        if not user:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        current_end_date = datetime.fromisoformat(user[5]).astimezone(pytz.UTC)

        if days_str.startswith("+"):
            new_end_date = current_end_date + timedelta(days=days_to_add)
        else:
            new_end_date = datetime.now(pytz.UTC) + timedelta(days=days_to_add)

        access_duration = (new_end_date - datetime.now(pytz.UTC)).days

        if await update_user_configs(user_id, access_duration + 1):
            await update_user_access(user_id, new_end_date.isoformat())
            markup = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="main_menu"
                        )
                    ],
                ]
            )
            await bot.send_photo(
                chat_id=user_id,
                photo=types.FSInputFile("assets/warning.png"),
                caption=f"üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                f"–î–æ—Å—Ç—É–ø –∫ <b>MatrixVPN</b> –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ <b>{access_duration} {get_day_word(access_duration)}</b>.\n\n"
                "<b>‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.</b>",
                parse_mode="HTML",
                reply_markup=markup,
            )
            await message.reply(
                f"–ö–æ–º–∞–Ω–¥–∞ /renew –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ù–æ–≤—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ {access_duration} {get_day_word(access_duration)}."
            )
        else:
            await message.reply(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞."
            )

    except (ValueError, TelegramAPIError) as e:
        logger.error(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        logger.error(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )


@admin_router.message(Command("update"), IsAdmin())
async def update_access(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã update."""
    command_parts = message.text.split()
    if len(command_parts) != 3:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /update <user_id> <days>")
        return

    try:
        user_id = int(command_parts[1])
        days_to_add = int(command_parts[2])
    except (ValueError, IndexError):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /update <user_id> <days>")
        return

    try:
        user = await get_user_by_id(user_id)

        if not user:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        current_end_date = datetime.fromisoformat(user[5]).astimezone(pytz.UTC)

        new_end_date = current_end_date + timedelta(days=days_to_add)

        access_duration = (new_end_date - datetime.now(pytz.UTC)).days

        await update_user_access(user_id, new_end_date.isoformat())
        markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="main_menu"
                    )
                ],
            ]
        )
        await bot.send_photo(
            chat_id=user_id,
            photo=types.FSInputFile("assets/warning.png"),
            caption=f"üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ! –°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω!</b>\n\n–î–æ—Å—Ç—É–ø –∫ <b>MatrixVPN</b> –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ <b>{access_duration} {get_day_word(access_duration)}</b>.\n\n",
            parse_mode="HTML",
            reply_markup=markup,
        )
        await message.reply(
            f"–ö–æ–º–∞–Ω–¥–∞ /update –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ù–æ–≤—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ {access_duration} {get_day_word(access_duration)}."
        )

    except (ValueError, TelegramAPIError) as e:
        logger.error(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        logger.error(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )


@admin_router.message(Command("refund"), IsAdmin())
async def refund_stars_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /refund."""
    command_parts = message.text.split()
    if len(command_parts) != 3:
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /refund <user_id> <telegram_payment_charge_id>"
        )
        return

    try:
        user_id = int(command_parts[1])
        payment_charge_id = command_parts[2]
    except (ValueError, IndexError):
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /refund <user_id> <telegram_payment_charge_id>"
        )
        return

    try:
        # Attempt to refund the stars
        await bot.refund_star_payment(
            user_id=user_id, telegram_payment_charge_id=payment_charge_id
        )
        await message.reply(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (ID –ø–ª–∞—Ç–µ–∂–∞: {payment_charge_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
        )
        logger.info(
            f"Refund request sent for user {user_id} with payment ID {payment_charge_id}"
        )
    except TelegramAPIError as e:
        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        logger.error(
            f"Error refunding stars for user {user_id} with payment ID {payment_charge_id}: {e}",
            exc_info=True,
        )
    except Exception as e:
        await message.reply(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /refund –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        logger.error(
            f"Unexpected error processing /refund for user {user_id}: {e}",
            exc_info=True,
        )
